import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'

// ‚úÖ Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validate request body
const requestSchema = z.object({
  question: z.string().min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°'),
  pondId: z.string().optional(),
  pondData: z.object({}).passthrough().optional(),
})


// ‚úÖ Helper: ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
function formatPondData(pondData: any) {
  if (!pondData) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πà‡∏≠'

  return `
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏≠: ${pondData?.name ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡πà‡∏≠: ${pondData?.size ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡πÑ‡∏£‡πà
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ö‡πà‡∏≠: ${pondData?.date ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏Ç‡∏ô‡∏≤‡∏î ‡∏Å x ‡∏¢: ${pondData?.dimensions ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏ö‡πà‡∏≠: ${pondData?.depth ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡πÄ‡∏°‡∏ï‡∏£
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Å‡∏∏‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢: ${pondData?.shrimp_count ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ï‡∏±‡∏ß
- ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ö‡πà‡∏≠: ${pondData?.location ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${pondData?.notes ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡πà‡∏≠: ${pondData?.created_at ? new Date(pondData.created_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${pondData?.updated_at ? new Date(pondData.updated_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
`
}

// ‚úÖ API Route
export async function POST(request: NextRequest) {
  try {
    // 1) ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ validate body
    const body = await request.json().catch(() => null)
    const { question, pondId, pondData } = requestSchema.parse(body)

    // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key
    const apiKey = process.env.DEEPSEEK_API_KEY
    console.log('üîë API Key check:', {
      hasApiKey: !!apiKey,
      keyLength: apiKey?.length || 0,
      environment: process.env.NODE_ENV
    })
    
    if (!apiKey) {
      console.log('‚ùå DEEPSEEK_API_KEY not found in environment variables')
      // ‡∏™‡πà‡∏á fallback response ‡πÅ‡∏ó‡∏ô error
      return NextResponse.json({
        success: true,
        data: { 
          answer: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏≠: ${pondData?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡πà‡∏≠: ${pondData?.size || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡πÑ‡∏£‡πà
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏∏‡πâ‡∏á: ${pondData?.shrimp_count || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ï‡∏±‡∏ß

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${question}

‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á‡πÑ‡∏î‡πâ:

- ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
- ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏∏‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Ñ‡∏£‡∏±‡∏ö`
        }
      })
    }

    // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á context
    const context = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (ID: ${pondId ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}):
${formatPondData(pondData)}

‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
- ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ ** ‡∏´‡∏£‡∏∑‡∏≠ * ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 300 ‡∏Ñ‡∏≥
- ‡πÉ‡∏ä‡πâ bullet points (-) ‡πÅ‡∏ó‡∏ô ** ‡∏´‡∏£‡∏∑‡∏≠ *
- ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${question}
`

    // üîç log context ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ dev
    if (process.env.NODE_ENV !== 'production') {
      console.log('ü§ñ Generated Context:', context)
    }

    // 4) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DeepSeek API ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout
    const controller = new AbortController()
    const timeout = setTimeout(() => controller.abort(), 10000) // 10s timeout

    console.log('üöÄ Calling DeepSeek API...')
    const response = await fetch(
      'https://api.deepseek.com/v1/chat/completions',
      {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [
            {
              role: 'system',
              content: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£'
            },
            {
              role: 'user',
              content: context
            }
          ],
          max_tokens: 500,
          temperature: 0.7
        }),
        signal: controller.signal,
      }
    )
    
    
    
    console.log('üì° DeepSeek API Response:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok
    })

    clearTimeout(timeout)

    // 5) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response
    if (!response.ok) {
      const errText = await response.text()
      console.log('Gemini API error response:', errText)
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API key ‡∏´‡∏£‡∏∑‡∏≠ API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á fallback response
      if (response.status === 400 || response.status === 403) {
        return NextResponse.json({
          success: true,
          data: { 
            answer: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏≠: ${pondData?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡πà‡∏≠: ${pondData?.size || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡πÑ‡∏£‡πà
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏∏‡πâ‡∏á: ${pondData?.shrimp_count || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ï‡∏±‡∏ß

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${question}

‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏∏‡πâ‡∏á‡πÑ‡∏î‡πâ:

- ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
- ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏∏‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Ñ‡∏£‡∏±‡∏ö`
          }
        })
      }
      
      return NextResponse.json(
        {
          success: false,
          error: {
            message: 'AI API ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            code: response.status,
            details: errText,
          },
        },
        { status: 500 }
      )
    }

    const data = await response.json()
    const answer =
      data.choices?.[0]?.message?.content ||
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ'

    // 6) ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö standardized response
    return NextResponse.json({
      success: true,
      data: { answer },
    })
  } catch (error) {
    console.log('Error in POST /api/agent:', error)

    return NextResponse.json(
      {
        success: false,
        error: {
          message:
            error instanceof Error ? error.message : 'Unknown error occurred',
          code: 500,
          environment: process.env.NODE_ENV,
        },
      },
      { status: 500 }
    )
  }
}
